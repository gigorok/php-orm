{"name":"Php-orm","tagline":"PHP ORM library","body":"# PHP ORM library\r\n=============================\r\n\r\nThe open source ORM library on PHP.\r\n\r\n## Introduction ##\r\n\r\nThe PHP-ORM follows ActiveRecord architectural pattern.\r\n\r\nMore details can be found [here](http://en.wikipedia.org/wiki/Active_record_pattern).\r\n\r\n## Minimum Requirements\r\n\r\n- PHP 5.4+\r\n- PDO driver for your respective database\r\n\r\n## Supported Databases\r\n\r\n- MySQL\r\n- PostgreSQL\r\n\r\n## Features\r\n\r\n- Finder methods\r\n- Writer methods\r\n- Relationships\r\n- Validations\r\n- Callbacks\r\n- Transactions\r\n- Support for multiple adapters\r\n- Table's schema\r\n\r\n## Installation\r\n\r\nUse [composer](http://getcomposer.org) to install PHP ORM library.\r\nJust add to your `composer.json` a text below and run the `php composer.phar update` command to install it:\r\n\r\n    {\r\n        \"require\": {\r\n            \"gigorok/php-orm\": \"0.2.*\"\r\n        }\r\n    }\r\n\r\n## Basic CRUD\r\n\r\n### Retrieve ###\r\nThese are your basic methods to find and retrieve records from your database.\r\n\r\n    $post = Post::find(1);\r\n    echo $post->title; # 'Test title!'\r\n    echo $post->author_id; # 5\r\n\r\n    # also the same since it is the first record in the db\r\n    $post = Post::first();\r\n\r\n    # finding using a conditions array\r\n    $posts = Post::where('name=? or id > ?', array('The Bridge Builder', 100));\r\n\r\n### Create ###\r\nHere we create a new post by instantiating a new object and then invoking the save() method.\r\n\r\n    $post = new Post();\r\n    $post->title = 'My first blog post!!';\r\n    $post->author_id = 5;\r\n    $post->save();\r\n    # INSERT INTO `posts` (title,author_id) VALUES('My first blog post!!', 5)\r\n\r\n### Update ###\r\nTo update you would just need to find a record first and then change one of its attributes.\r\n\r\n    $post = Post::find(1);\r\n    echo $post->title; # 'My first blog post!!'\r\n    $post->title = 'Some real title';\r\n    $post->save();\r\n    # UPDATE `posts` SET title='Some real title' WHERE id=1\r\n\r\n    $post->title = 'New real title';\r\n    $post->author_id = 1;\r\n    $post->save();\r\n    # UPDATE `posts` SET title='New real title', author_id=1 WHERE id=1\r\n\r\n### Destroy ###\r\nDeleting a record will not *destroy* the object. This means that it will call sql to delete\r\nthe record in your database but you can still use the object if you need to.\r\n\r\n    $post = Post::find(1);\r\n    $post->destroy();\r\n    # DELETE FROM `posts` WHERE id=1\r\n    echo $post->title; # 'New real title'\r\n\r\n## License\r\n\r\nLicensed under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}